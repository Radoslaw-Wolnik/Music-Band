// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  role            UserRole
  name            String
  surname         String
  username        String    @unique 
  profilePicture  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tokens          Token[]
  bandMember      BandMember?
  patron          Patron?
  tickets         Ticket[]
  posts           BlogPost[]
  subscription    Subscription?
  notifications   Notification[]
  Deactivated     DateTime?
  lastActive      DateTime 

  merchPurchases  MerchPurchase[] // User's merchandise purchases
  fanMeetings     FanMeeting[]    @relation("FanMeetingAttendees")
}

model Token {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int // Foreign key to User
  token     String    @unique
  type      TokenType // Enum for token types
  expiresAt DateTime // Expiration date of the token
  createdAt DateTime  @default(now())
  isActive  Boolean   @default(true)
}

enum TokenType {
  PASSWORD_RESET
  ACCOUNT_VERIFICATION
  ONE_TIME_LOGIN
  DEACTIVATION
}

model BandMember {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  instrument      String?
  bio             String?
  practices       Practice[]
}

model Patron {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  subscriptionId  Int
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  tier            SubscriptionTier
  startDate       DateTime
  endDate         DateTime
  patrons         Patron[]
}

model Venue {
  id              Int       @id @default(autoincrement())
  name            String
  address         String
  capacity        Int
  layout          Json
  events          Event[]
}

model Event {
  id              Int       @id @default(autoincrement())
  venueId         Int
  venue           Venue     @relation(fields: [venueId], references: [id])
  name            String
  description     String
  date            DateTime
  endDate         DateTime
  ticketPrices    Json
  tickets         Ticket[]
  eventPlan       EventPlanItem[]
  defaultPhoto    String?
  isPatronOnly    Boolean   @default(false)
}

model EventPlanItem {
  id              Int       @id @default(autoincrement())
  eventId         Int
  event           Event     @relation(fields: [eventId], references: [id])
  time            DateTime
  name            String
}

model Ticket {
  id              Int       @id @default(autoincrement())
  eventId         Int
  event           Event     @relation(fields: [eventId], references: [id])
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  seat            String?
  price           Float
  purchasedAt     DateTime  @default(now())
  status          TicketStatus @default(ACTIVE)
}

model Practice {
  id              Int       @id @default(autoincrement())
  bandMemberId    Int
  bandMember      BandMember @relation(fields: [bandMemberId], references: [id])
  date            DateTime
  duration        Int
  notes           String?
}

model BlogPost {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  title           String
  content         String
  photos          String[]
  videos          String[]
  accessTier      SubscriptionTier
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model MerchItem {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  price           Float
  stock           Int
  image           String?
  purchases       MerchPurchase[]
}

model MerchPurchase {
  id              Int       @id @default(autoincrement())
  merchItemId     Int
  merchItem       MerchItem @relation(fields: [merchItemId], references: [id])
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  quantity        Int
  totalPrice      Float
  createdAt       DateTime  @default(now())
}

model FanMeeting {
  id              Int       @id @default(autoincrement())
  date            DateTime
  description     String
  maxAttendees    Int
  attendees       User[]   @relation("FanMeetingAttendees")
}

model Notification {
  id              Int       @id @default(autoincrement())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  message         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
}

model MainPage {
  id              Int       @id @default(autoincrement())
  content         Json
  updatedAt       DateTime  @updatedAt
}

enum UserRole {
  FAN
  PATRON
  BAND_MEMBER
  MANAGER
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
}

enum TicketStatus {
  ACTIVE
  REFUNDED
  USED
}


